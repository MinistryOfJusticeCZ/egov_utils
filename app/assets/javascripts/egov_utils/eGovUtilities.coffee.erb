
window.eGovUtilities =
  setup: ()->
    # select2 defaults
    $.fn.select2.defaults.set( "theme", "bootstrap" )

    # datepicker defaults
    $.extend $.fn.datetimepicker.defaults.icons, {
      time: 'fa fa-clock-o',
      date: 'fa fa-calendar',
      up: 'fa fa-chevron-up',
      down: 'fa fa-chevron-down',
      previous: 'fa fa-chevron-left',
      next: 'fa fa-chevron-right',
      today: 'fa fa-calendar-check-o',
      clear: 'fa fa-trash-o',
      close: 'fa fa-close'
    }

    $(document).on 'change', '.custom-file-input:file', ()->
      $input = $(this)
      numFiles = if this.files then this.files.length else 1
      label = $input.val().replace(/\\/g, '/').replace(/.*\//, '')
      $input.trigger('fileselect', [numFiles, label])
      $input.parent().find('.custom-file-control').text(label);


  initPage: ($container)->
    $container ||= $(document)
    eGovUtilities.initDatepickers($container)
    eGovUtilities.initSelect2($container)
    eGovUtilities.initFileFields($container)

  clearBeforeCache: ($container)->
    $container ||= $(document)
    eGovUtilities.destroySelect2($container)

  initFileFields: ($container)->
    $('.custom-file-input:file').each ()->
      $input = $(this)
      label = $input.val().replace(/\\/g, '/').replace(/.*\//, '')
      $input.parent().find('.custom-file-control').text(label);

  initDatepickers: ($container)->
    $container ||= $(document)
    if !Modernizr.inputtypes.date
      pickers = $('[type="date"][data-provide="datepicker"]', $container)
      pickers.parent().datetimepicker()
    if !Modernizr.inputtypes.datetime
      pickers = $('[type="datetime"][data-provide="datepicker"]', $container)
      pickers.parent().datetimepicker()
    if !Modernizr.inputtypes['datetime-local']
      pickers = $('[type="datetime-local"][data-provide="datepicker"]', $container)
      pickers.parent().datetimepicker()

  initSelect2: ($container)->
    $container ||= $(document)
    $('[data-provide="select2"]', $container).select2()

  destroySelect2: ($container)->
    $container ||= $(document)
    $('[data-provide="select2"]', $container).select2('destroy')

  addCopyToClipboardLink: ($node)->
    $cpyBtn = $('<a href="javascript:void(0)" data-clipboard-text="'+$node.text()+'"><i class="fa fa-clipboard"></i></a>').insertAfter($node)
    clipboard = new Clipboard($cpyBtn.get(0));
    # clipboard.on('success', (e)->
    #   console.info('Action:', e.action);
    #   console.info('Text:', e.text);
    #   console.info('Trigger:', e.trigger);
    # )
    # clipboard.on('error', (e)->
    #   console.error('Action:', e.action);
    #   console.error('Trigger:', e.trigger);
    # )
    $cpyBtn

  initModal: (modalId, options)->
    options = options || {}
    modalId = modalId || 'modal'
    $modal = $('#'+modalId)
    if $modal.length != 1
      $modal = $('<div id="'+modalId+'" class="modal fade"'+(if options['backdrop'] then ' data-backdrop="static"' else '')+'><div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title"></h5>
        <button class="close" type="button" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
      </div>
      <div class="modal-body"></div>
      <div class="modal-footer"></div>
    </div></div></div>').appendTo('body')
      $modal.on 'submit', 'form', (evt)->
        evt.preventDefault()
        $form = $(this)
        data = $form.serializeArray()
        $.ajax($form.attr('action')+'.json', {method: $form.attr('method'), data: data, dataType: 'json'}).done (xhr)->
          $modal.trigger('egov:submitted', [xhr])
          $modal.modal('hide')
        .fail (xhr) ->
          if xhr.status == 422
            $.ajax($form.attr('action'),  {method: $form.attr('method'), data: data, dataType: 'html'}).done (xhr)->
              eGovUtilities.setModalContent($modal, xhr)

    $modal

  setModalContent: ($modal, body, title) ->
    $modal.find('.modal-title').text(title)
    $modal.find('.modal-body').html(body)
    eGovUtilities.initPage($modal)

  showModal: (body, options) ->
    options = options || {}
    $modal = this.initModal((options['modalId']), {backdrop: options['backdrop']})
    title = options['title']
    delete options['modalId']
    delete options['backdrop']
    delete options['title']
    eGovUtilities.setModalContent($modal, body, title)
    $modal.modal(options)
    window.setTimeout(()->
      eGovUtilities.initPage($modal)
    , 750)
    $modal

$(eGovUtilities.setup)
$(document).on 'turbolinks:load', (evt)->
  eGovUtilities.initPage()

$(document).on 'turbolinks:before-cache', (evt)->
  eGovUtilities.clearBeforeCache()

